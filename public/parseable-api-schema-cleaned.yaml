openapi: 3.0.0
info:
  title: Parseable API
  version: 1.0.0
  description: |-
    Core APIs for Parseable - a simplified version of the API schema with only essential endpoints.
servers:
  - url: http://ENDPOINT
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
security:
  - basicAuth: []
paths:
  /api/v1/logstream/{stream_name}:
    put:
      tags:
        - Dataset Management
      summary: Create a log stream
      operationId: createLogStream
      description: |
        This endpoint is used to create a new log stream within Parseable.  
        A **log stream** is a group of similar logs. For example, you can create a log stream for a specific application's logs, another log stream for your database logs, and so on. You can create as many log streams as needed to organize and manage logs efficiently.

        **Optional Headers:**
        - **X-P-Custom-Partition**: Define custom partitioning for the log stream
        - **X-P-Update-Stream**: Set to `true` to update an existing stream, `false` to create a new one
      x-code-samples:
        - lang: bash
          source: |
            curl -X PUT "http://localhost:8000/api/v1/logstream/my-stream" \
              -H "Authorization: Basic dXNlcjpwYXNzd29yZA==" \
              -H "X-P-Custom-Partition: timestamp" \
              -H "Content-Type: application/json"
        - lang: python
          source: |
            import requests
            
            url = "http://localhost:8000/api/v1/logstream/my-stream"
            headers = {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "X-P-Custom-Partition": "timestamp",
                "Content-Type": "application/json"
            }
            
            response = requests.put(url, headers=headers)
            print(response.status_code)
        - lang: javascript
          source: |
            fetch("http://localhost:8000/api/v1/logstream/my-stream", {
              method: "PUT",
              headers: {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "X-P-Custom-Partition": "timestamp",
                "Content-Type": "application/json"
              }
            })
            .then(response => console.log(response.status))
            .catch(error => console.error("Error:", error));
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
        - name: X-P-Custom-Partition
          in: header
          schema:
            type: string
          required: false
          description: Define custom partitioning for the log stream
        - name: X-P-Update-Stream
          in: header
          schema:
            type: string
            enum: ["true", "false"]
          required: false
          description: Set to true to update an existing stream, false to create a new one
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Dataset Management
      summary: Delete a log stream
      operationId: deleteLogStream
      description: |
        This endpoint is used to delete an existing log stream.
        When a log stream is deleted, all associated data is permanently removed.
      x-code-samples:
        - lang: bash
          source: |
            curl -X DELETE "http://localhost:8000/api/v1/logstream/my-stream" \
              -H "Authorization: Basic dXNlcjpwYXNzd29yZA=="
        - lang: python
          source: |
            import requests
            
            url = "http://localhost:8000/api/v1/logstream/my-stream"
            headers = {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA=="
            }
            
            response = requests.delete(url, headers=headers)
            print(response.status_code)
        - lang: javascript
          source: |
            fetch("http://localhost:8000/api/v1/logstream/my-stream", {
              method: "DELETE",
              headers: {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA=="
              }
            })
            .then(response => console.log(response.status))
            .catch(error => console.error("Error:", error));
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Dataset Management
      summary: Send logs to a stream
      operationId: sendLogsToStream
      description: |
        **Log Ingestion API via Stream Endpoint**  
        In this approach, you need to create a stream first using the **Create Stream API**.  
        Once the stream is created, you can send logs to the stream ingestion API endpoint:  
        **http://INGESTION_ENDPOINT/api/v1/logstream/{stream_name}**  
        This API does not require any headers for specifying the stream name, as the stream name is included in the URL path.
      x-code-samples:
        - lang: bash
          source: |
            curl -X POST "http://localhost:8000/api/v1/logstream/my-stream" \
              -H "Authorization: Basic dXNlcjpwYXNzd29yZA==" \
              -H "Content-Type: application/json" \
              -d '[{"level":"info","message":"User logged in","timestamp":"2023-01-01T12:00:00Z"}]'
        - lang: python
          source: |
            import requests
            import json
            
            url = "http://localhost:8000/api/v1/logstream/my-stream"
            headers = {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "Content-Type": "application/json"
            }
            
            data = [{
                "level": "info",
                "message": "User logged in",
                "timestamp": "2023-01-01T12:00:00Z"
            }]
            
            response = requests.post(url, headers=headers, data=json.dumps(data))
            print(response.status_code)
        - lang: javascript
          source: |
            fetch("http://localhost:8000/api/v1/logstream/my-stream", {
              method: "POST",
              headers: {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "Content-Type": "application/json"
              },
              body: JSON.stringify([{
                "level": "info",
                "message": "User logged in",
                "timestamp": "2023-01-01T12:00:00Z"
              }])
            })
            .then(response => console.log(response.status))
            .catch(error => console.error("Error:", error));
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - id: 434a5f5e-2f5f-11ed-a261-asdasdafgdfd
                  datetime: 24/Jun/2022:14:12:15 +0000
                  host: 153.10.110.81
                  user-identifier: >-
                    Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:64.0)
                    Gecko/20100101 Firefox/64.0
                  method: PUT
                  status: 500
                  referrer: http://www.google.com/
      security:
        - basicAuth: []
      parameters:
        - name: stream_name
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/query:
    post:
      tags:
        - Query API
      summary: Query a log stream
      operationId: queryLogStream
      description: |
        **Parseable Log Query API**  
        This endpoint allows you to query logs using PostgreSQL syntax.  
        
        The query API accepts the following parameters:
        - **query**: The SQL query to execute (required)
        - **startTime**: The start time for the query range (optional)
        - **endTime**: The end time for the query range (optional)
        - **streamName**: The name of the log stream to query (required)
        
        Example request body:
        ```json
        {
          "query": "SELECT * FROM log WHERE log ILIKE '%error%';",
          "startTime": "2023-01-01 00:00:00.000000",
          "endTime": "2023-01-01 23:59:59.999999",
          "streamName": "example-stream"
        }
        ```
      x-code-samples:
        - lang: bash
          source: |
            curl -X POST "http://localhost:8000/api/v1/query" \
              -H "Authorization: Basic dXNlcjpwYXNzd29yZA==" \
              -H "Content-Type: application/json" \
              -d '{
                "query": "SELECT * FROM log WHERE log ILIKE \"%error%\";",
                "startTime": "2023-01-01 00:00:00.000000",
                "endTime": "2023-01-01 23:59:59.999999",
                "streamName": "example-stream"
              }'
        - lang: python
          source: |
            import requests
            import json
            
            url = "http://localhost:8000/api/v1/query"
            headers = {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "Content-Type": "application/json"
            }
            
            data = {
                "query": "SELECT * FROM log WHERE log ILIKE '%error%';",
                "startTime": "2023-01-01 00:00:00.000000",
                "endTime": "2023-01-01 23:59:59.999999",
                "streamName": "example-stream"
            }
            
            response = requests.post(url, headers=headers, data=json.dumps(data))
            print(response.json())
        - lang: javascript
          source: |
            fetch("http://localhost:8000/api/v1/query", {
              method: "POST",
              headers: {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                "query": "SELECT * FROM log WHERE log ILIKE '%error%';",
                "startTime": "2023-01-01 00:00:00.000000",
                "endTime": "2023-01-01 23:59:59.999999",
                "streamName": "example-stream"
              })
            })
            .then(response => response.json())
            .then(data => console.log(data))
            .catch(error => console.error("Error:", error));
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - query
                - streamName
              properties:
                query:
                  type: string
                startTime:
                  type: string
                endTime:
                  type: string
                streamName:
                  type: string
      security:
        - basicAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/ingest:
    post:
      tags:
        - Log Ingestion
      summary: Ingest logs with headers
      operationId: ingestLogsWithHeaders
      description: |
        **Log Ingestion API via Custom Headers**  
        This approach allows you to send logs to Parseable using custom headers to specify the target stream.  
        
        Required headers:
        - **X-P-Stream**: The name of the stream to ingest logs into
      x-code-samples:
        - lang: bash
          source: |
            curl -X POST "http://localhost:8000/api/v1/ingest" \
              -H "Authorization: Basic dXNlcjpwYXNzd29yZA==" \
              -H "X-P-Stream: my-stream" \
              -H "Content-Type: application/json" \
              -d '[{"level":"info","message":"User logged in","timestamp":"2023-01-01T12:00:00Z"}]'
        - lang: python
          source: |
            import requests
            import json
            
            url = "http://localhost:8000/api/v1/ingest"
            headers = {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "X-P-Stream": "my-stream",
                "Content-Type": "application/json"
            }
            
            data = [{
                "level": "info",
                "message": "User logged in",
                "timestamp": "2023-01-01T12:00:00Z"
            }]
            
            response = requests.post(url, headers=headers, data=json.dumps(data))
            print(response.status_code)
        - lang: javascript
          source: |
            fetch("http://localhost:8000/api/v1/ingest", {
              method: "POST",
              headers: {
                "Authorization": "Basic dXNlcjpwYXNzd29yZA==",
                "X-P-Stream": "my-stream",
                "Content-Type": "application/json"
              },
              body: JSON.stringify([{
                "level": "info",
                "message": "User logged in",
                "timestamp": "2023-01-01T12:00:00Z"
              }])
            })
            .then(response => console.log(response.status))
            .catch(error => console.error("Error:", error));
        
        The API accepts logs in JSON format. You can send single log entries or arrays of log entries.
        
        Example:
        ```json
        {
          "level": "info",
          "message": "User logged in",
          "timestamp": "2023-01-01T12:00:00Z",
          "user_id": "user123"
        }
        ```
        
        Or as an array:
        ```json
        [
          {
            "level": "info",
            "message": "User logged in",
            "timestamp": "2023-01-01T12:00:00Z",
            "user_id": "user123"
          },
          {
            "level": "error",
            "message": "Failed to process request",
            "timestamp": "2023-01-01T12:01:00Z",
            "error_code": "ERR-1001"
          }
        ]
        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
      security:
        - basicAuth: []
      parameters:
        - name: X-P-Stream
          in: header
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
